#Docker Compose 파일 포맷의 버전을 지정합니다.
version: "3.8"
services:
  config-service:
    image: 908027399356.dkr.ecr.ap-northeast-2.amazonaws.com/config-service:latest
    container_name: config-service
    networks:
      - msa-network
    ports:
      - "8888:8888"
    volumes:
      - /home/ubuntu/config-service-tmp/application-dev.yml:/application-dev.yml
    command:
      [
        "--spring.profiles.active=dev",
        "--spring.config.location=/application-dev.yml",
      ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://config-service:8888/actuator/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: always

  discovery-service:
    image: 908027399356.dkr.ecr.ap-northeast-2.amazonaws.com/discovery-service:latest
    container_name: discovery-service
    networks:
      - msa-network
    ports:
      - "8761:8761"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://discovery-service:8761"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 60s

  gateway-service:
    image: 908027399356.dkr.ecr.ap-northeast-2.amazonaws.com/gateway-service:latest
    container_name: gateway-service
    networks:
      - msa-network
    ports:
      - "8000:8000"
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  user-service:
    image: 908027399356.dkr.ecr.ap-northeast-2.amazonaws.com/user-service:latest
    container_name: user-service
    networks:
      - msa-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  restaurant-service:
    image: 908027399356.dkr.ecr.ap-northeast-2.amazonaws.com/restaurant-service:latest
    container_name: restaurant-service
    networks:
      - msa-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  review-service:
    image: 908027399356.dkr.ecr.ap-northeast-2.amazonaws.com/review-service:latest
    container_name: review-service
    networks:
      - msa-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  point-service:
    image: 908027399356.dkr.ecr.ap-northeast-2.amazonaws.com/point-service:latest
    container_name: point-service
    networks:
      - msa-network
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    restart: always

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - msa-network

  mysql-db:
    image: mysql:8
    ports:
      - "3316:3306"
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: reviewingservice
    volumes:
      - db-data:/var/lib/mysql

# 서비스들이 연결될 docker 네트워크를 정의할 수 있습니다.
# 동일한 호스트 내에서 서로 통신할 수 있도록 해 주는 Docker의 네트워크 드라이버
networks:
  msa-network:
    driver: bridge

volumes:
  db-data:
